<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--
  Copyright 2014 Development Sprint, LLC.
  
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  
  http://www.apache.org/licenses/LICENSE-2.0
  
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<xsd:schema xmlns="http://www.developmentsprint.com/schema/spring/breaker"
  xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:beans="http://www.springframework.org/schema/beans"
  xmlns:util="http://www.springframework.org/schema/util" xmlns:tool="http://www.springframework.org/schema/tool"
  targetNamespace="http://www.developmentsprint.com/schema/spring/breaker"
  elementFormDefault="qualified" attributeFormDefault="unqualified">

  <xsd:import namespace="http://www.springframework.org/schema/beans"
    schemaLocation="http://www.springframework.org/schema/beans/spring-beans-3.1.xsd" />
  <xsd:import namespace="http://www.springframework.org/schema/tool"
    schemaLocation="http://www.springframework.org/schema/tool/spring-tool-3.1.xsd" />
  <xsd:import namespace="http://www.springframework.org/schema/util"
    schemaLocation="http://www.springframework.org/schema/util/spring-util-3.1.xsd" />

  <xsd:import namespace="http://www.springframework.org/schema/beans" />

  <xsd:annotation>
    <xsd:documentation>
      <![CDATA[
Defines the elements used in the Spring Framework's declarative
circuit breaker management infrastructure.
      ]]>
    </xsd:documentation>
  </xsd:annotation>

  <xsd:element name="annotation-driven">

    <xsd:complexType>

      <xsd:attribute name="circuit-manager" type="xsd:string"
        default="circuitManager">
        <xsd:annotation>
          <xsd:documentation
            source="java:com.developmentsprint.spring.breaker.CircuitManager">
            <![CDATA[
The bean name of the CircuitManager that is to be used to provide circuit breaker logic..

This attribute is not required, and only needs to be specified
explicitly if the bean name of the desired CircuitManager
is not 'circuitManager'.
            ]]></xsd:documentation>
          <xsd:appinfo>
            <tool:annotation kind="ref">
              <tool:expected-type
                type="com.developmentsprint.spring.breaker.CircuitManager" />
            </tool:annotation>
          </xsd:appinfo>
        </xsd:annotation>
      </xsd:attribute>

      <xsd:attribute name="mode" default="proxy">
        <xsd:annotation>
          <xsd:documentation><![CDATA[
Should annotated beans be proxied using Spring's AOP framework,
or should they rather be weaved with an AspectJ transaction aspect?

AspectJ weaving requires spring-aspects.jar on the classpath,
as well as load-time weaving (or compile-time weaving) enabled.

Note: The weaving-based aspect requires the @CircuitBreaker
annotations to be defined on the concrete class. Annotations in interfaces
will not work in that case (they will rather only work with interface-based proxies)!
                    ]]></xsd:documentation>
        </xsd:annotation>
        <xsd:simpleType>
          <xsd:restriction base="xsd:string">
            <xsd:enumeration value="proxy" />
            <xsd:enumeration value="aspectj" />
          </xsd:restriction>
        </xsd:simpleType>
      </xsd:attribute>

      <xsd:attribute name="proxy-target-class" type="xsd:boolean"
        default="false">
        <xsd:annotation>
          <xsd:documentation><![CDATA[
Are class-based (CGLIB) proxies to be created? By default, standard
Java interface-based proxies are created.

Note: Class-based proxies require the @CircuitBreaker annotations
to be defined on the concrete class. Annotations in interfaces will not work
in that case (they will rather only work with interface-based proxies)!
                    ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:attribute>

      <xsd:attribute name="order" type="xsd:int">
        <xsd:annotation>
          <xsd:documentation source="java:org.springframework.core.Ordered"><![CDATA[
Controls the ordering of the execution of the circuit breaker advisor
when multiple advice executes at a specific joinpoint.
                    ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:attribute>

    </xsd:complexType>

  </xsd:element>

  <xsd:element name="advice">
    <xsd:complexType>
      <xsd:annotation>
        <xsd:documentation
          source="java:com.developmentsprint.spring.breaker.interceptor.CircuitBreakerInterceptor"><![CDATA[
Defines the circuit breaker semantics of the AOP advice that is to be
executed.

That is, this advice element is where the circuit breaker semantics of
any number of methods are defined.
              ]]></xsd:documentation>
        <xsd:appinfo>
          <tool:annotation>
            <tool:exports
              type="java:com.developmentsprint.spring.breaker.interceptor.CircuitBreakerInterceptor" />
          </tool:annotation>
        </xsd:appinfo>
      </xsd:annotation>
      <xsd:complexContent>
        <xsd:extension base="beans:identifiedType">
          <xsd:sequence>
            <xsd:element name="circuit-breaker" type="definitionsType"
              minOccurs="0" maxOccurs="unbounded" />
          </xsd:sequence>
          <xsd:attribute name="circuit-manager" type="xsd:string"
            default="circuitManager">
            <xsd:annotation>
              <xsd:documentation
                source="java:com.developmentsprint.spring.breaker.CircuitManager"><![CDATA[
The bean name of the CircuitManager that is to be used
for storing and retrieving data.

This attribute is not required, and only needs to be specified
explicitly if the bean name of the desired CircuitManager
is not 'circuitManager'.
                          ]]></xsd:documentation>
              <xsd:appinfo>
                <tool:annotation kind="ref">
                  <tool:expected-type
                    type="com.developmentsprint.spring.breaker.CircuitManager" />
                </tool:annotation>
              </xsd:appinfo>
            </xsd:annotation>
          </xsd:attribute>
        </xsd:extension>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>

  <xsd:complexType name="basedefinitionType">
    <xsd:attribute name="name" type="xsd:string" use="optional">
      <xsd:annotation>
        <xsd:documentation><![CDATA[The name of the circuit.]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="method" type="xsd:string" use="optional">
      <xsd:annotation>
        <xsd:documentation><![CDATA[
The method name(s) with which the circuit attributes are to be
associated. The wildcard (*) character can be used to associate the
same circuit attribute settings with a number of methods; for
example, 'get*', 'handle*', '*Order', 'on*Event', etc.]]>
        </xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
  </xsd:complexType>

  <xsd:complexType name="definitionsType">
    <xsd:complexContent>
      <xsd:extension base="basedefinitionType">
        <xsd:sequence>
          <xsd:choice minOccurs="0" maxOccurs="1">
            <xsd:element name="properties" minOccurs="0"
              maxOccurs="1" type="beans:propsType" />
          </xsd:choice>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>

</xsd:schema>
